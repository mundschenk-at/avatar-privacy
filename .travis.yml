# Travis CI (MIT License) configuration file for the Avatar Privacy plugin.
# @link https://travis-ci.org/

# For use with the Avatar Privacy WordPress plugin.
# @link https://github.com/mundschenk-at/avatar-privacy

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Cache composer stuff
cache:
    directories:
        - $HOME/.composer/cache

# Declare versions of PHP to use. Use one decimal max.
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    fast_finish: true

    include:
        # Current $required_php_version for WordPress:  5.6.20
        # Minimum version for activating Avatar Privacy, aliased to a recent 5.6.x version
        - php:  '5.6'
          env:  SCOPE=tests
        # aliased to a recent 7.0 version
        - php:  '7.0'
          env:  SCOPE=tests
        # aliased to a recent 7.1 version
        - php: '7.1'
          env:  SCOPE=tests
        # aliased to a recent 7.2 version
        - php:  '7.2'
          env:  SCOPE=tests
        # aliased to a recent 7.3 version
        - php:  '7.3'
          env:  SCOPE=tests
        # aliased to a recent 7.4 version
        - php:  '7.4'
          env:
            - PHPCS=1
            - SCOPE=coverage

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
  - composer remove humbug/php-scoper --dev --no-interaction --no-update;
  - if [[ "$PHPCS" != "1" ]]; then
          composer remove sirbrillig/phpcs-import-detection --dev --no-interaction --no-update;
    fi
  - if [[ "$SCOPE" == "coverage" ]]; then
          composer require php-coveralls/php-coveralls --dev --no-interaction --no-update;
    fi
  - composer update --no-interaction; phpenv rehash;

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    - find -L . -not \( -path ./tests -prune \) -not \( -path ./vendor -prune \) -name '*.php' -not \( -name .scoper.inc.php -prune \) -print0 | xargs -0 -n 1 -P 4 php -l;
    # WordPress Coding Standards.
    - if [[ "$PHPCS" == "1" ]]; then composer phpcs; fi
    # Unit tests.
    - if [[ "$SCOPE" == "tests" ]]; then composer test; fi
    # Code coverage
    - if [[ "$SCOPE" == "coverage" ]]; then
            mkdir -p build/logs;
            composer test -- --coverage-clover build/logs/clover.xml;
      fi

after_script:
    - if [[ "$SCOPE" == "coverage" ]]; then
            php vendor/bin/coveralls -v;
            wget https://scrutinizer-ci.com/ocular.phar;
            php ocular.phar code-coverage:upload --format=php-clover build/logs/clover.xml;
      fi

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false
